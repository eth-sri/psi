def maink(){
    dd := uniform(0,1)+uniform(0,1);
    r := uniform(0,1) + gauss(dd,1);// + gauss(10,1);
    //r := Gauss(dd,1);
    return r; // expected: ((d/dx)⁻¹[e^(-x²)](-r·⅟√2̅+⅟√2̅)·3/2·⅟√π̅+(d/dx)⁻¹[e^(-x²)](-r·⅟√2̅+⅟√2̅+√2̅)·1/2·⅟√π̅+(d/dx)⁻¹[e^(-x²)](-⅟√2̅+-√2̅+r·⅟√2̅)·3·r·⅟√π̅+(d/dx)⁻¹[e^(-x²)](-⅟√2̅+r·⅟√2̅)·3·r·⅟√π̅+(d/dx)⁻¹[e^(-x²)](-√2̅+r·⅟√2̅)·3/2·r²·⅟√π̅+(d/dx)⁻¹[e^(-x²)](-√2̅+r·⅟√2̅)·6·⅟√π̅+(d/dx)⁻¹[e^(-x²)](r·⅟√2̅)·1/2·r²·⅟√π̅+-(d/dx)⁻¹[e^(-x²)](-r·⅟√2̅)·⅟√π̅·1/2+-(d/dx)⁻¹[e^(-x²)](-r·⅟√2̅+√2̅)·⅟√π̅·3/2+-(d/dx)⁻¹[e^(-x²)](-⅟√2̅+-√2̅+r·⅟√2̅)·r²·⅟√π̅·1/2+-(d/dx)⁻¹[e^(-x²)](-⅟√2̅+-√2̅+r·⅟√2̅)·⅟√π̅·9/2+-(d/dx)⁻¹[e^(-x²)](-⅟√2̅+r·⅟√2̅)·r²·⅟√π̅·3/2+-(d/dx)⁻¹[e^(-x²)](-⅟√2̅+r·⅟√2̅)·⅟√π̅·3/2+-(d/dx)⁻¹[e^(-x²)](-√2̅+r·⅟√2̅)·r·⅟√π̅·6+-r·⅟2^(3/2)·⅟e^((-⅟√2̅+-√2̅+r·⅟√2̅)²)·⅟√π̅+-r·⅟2^(3/2)·⅟e^((-⅟√2̅+r·⅟√2̅)²)·⅟√π̅+-r·⅟2^(3/2)·⅟e^((-√2̅+r·⅟√2̅)²)·⅟√π̅+-r·⅟2^(3/2)·⅟e^(1/2·r²)·⅟√π̅+-r·⅟e^((-⅟√2̅+r·⅟√2̅)²)·⅟√π̅·√2̅+-⅟2^(3/2)·⅟e^((-⅟√2̅+r·⅟√2̅)²)·⅟√π̅+-⅟e^((-√2̅+r·⅟√2̅)²)·⅟√2̅·⅟√π̅+-⅟e^((-√2̅+r·⅟√2̅)²)·⅟√π̅·√2̅+r·⅟e^((-⅟√2̅+r·⅟√2̅)²)·⅟√2̅·⅟√π̅+r·⅟e^((-√2̅+r·⅟√2̅)²)·⅟√π̅·√2̅+r·⅟e^(1/2·r²)·⅟√2̅·⅟√π̅+⅟2^(3/2)·⅟e^((-⅟√2̅+-√2̅+r·⅟√2̅)²)·⅟√π̅+⅟e^((-⅟√2̅+-√2̅+r·⅟√2̅)²)·⅟√2̅·⅟√π̅+⅟e^((-⅟√2̅+r·⅟√2̅)²)·⅟√π̅·√2̅)·λ[r]
    // TODO: evaluate normalization constant (need to evaluate the limit more quickly)
}
