
dat Filter{
    x: ℝ , v: ℝ, a: ℝ;
    def Filter(x: ℝ,v: ℝ, a: ℝ){
        (this.x,this.v,this.a) = (x,v,a);
    }
    // update step: compute new state after one time step
    def update(t: ℝ){
        x = x + t*v;
        v = v + t*a;
        a = a + t*gauss(0,1); 
    }
    // measure x position with noise
    def measureX(x: ℝ, t: ℝ){
        //observe(this.x + gauss(0,1) == x); // TODO
        o := this.x + t*gauss(0,1);
        cobserve(o,x);
    }
}

def main(){
    data := [1,3,6,10,15];
    filter := Filter(0,0,0);
    for i in [0..data.length){
        filter.update(1);
        filter.measureX(data[i],1);
    }
    return (filter.x,filter.v,filter.a); // expected: 1/4·e^(-127303/801+-3/8·a·x+-43/48·x²+-65/144·a²+-65/144·v²+-77/18·v+17/24·v·x+25/18·a+45/2·x+49/72·a·v)·λ[a]·λ[v]·λ[x]·⅟π^(3/2)·√8̅9̅/̅1̅0̅8̅
}
